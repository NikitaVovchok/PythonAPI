from flask import Flask
from models.hospital import db, Gender
from crud import CRUDOperations
from config import Config
from datetime import datetime, date, timedelta
import random

def generate_random_phone():
    return f"+38099{random.randint(1000000, 9999999)}"

def generate_random_email(name):
    domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com']
    return f"{name.lower()}{random.randint(1, 999)}@{random.choice(domains)}"

def generate_random_date(start_year=1950, end_year=2000):
    start_date = date(start_year, 1, 1)
    end_date = date(end_year, 12, 31)
    days_between = (end_date - start_date).days
    random_days = random.randint(0, days_between)
    return start_date + timedelta(days=random_days)

def get_random_name(is_male=True):
    male_names = ['–Ü–≤–∞–Ω', '–ü–µ—Ç—Ä–æ', '–ú–∏—Ö–∞–π–ª–æ', '–ê–Ω–¥—Ä—ñ–π', '–û–ª–µ–∫—Å–∞–Ω–¥—Ä', '–í–∞—Å–∏–ª—å', '–°–µ—Ä–≥—ñ–π']
    female_names = ['–ú–∞—Ä—ñ—è', '–û–ª–µ–Ω–∞', '–ê–Ω–Ω–∞', '–Ü—Ä–∏–Ω–∞', '–¢–µ—Ç—è–Ω–∞', '–ù–∞—Ç–∞–ª—ñ—è', '–Æ–ª—ñ—è']
    male_surnames = ['–ü–µ—Ç—Ä–µ–Ω–∫–æ', '–ö–æ–≤–∞–ª–µ–Ω–∫–æ', '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ', '–®–µ–≤—á–µ–Ω–∫–æ', '–ú–µ–ª—å–Ω–∏–∫', '–¢–∫–∞—á–µ–Ω–∫–æ']
    female_surnames = ['–ü–µ—Ç—Ä–µ–Ω–∫–æ', '–ö–æ–≤–∞–ª–µ–Ω–∫–æ', '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ', '–®–µ–≤—á–µ–Ω–∫–æ', '–ú–µ–ª—å–Ω–∏–∫', '–¢–∫–∞—á–µ–Ω–∫–æ']
    
    if is_male:
        return random.choice(male_names), random.choice(male_surnames)
    return random.choice(female_names), random.choice(female_surnames)

def get_random_department():
    departments = [
        ('–ö–∞—Ä–¥—ñ–æ–ª–æ–≥—ñ—è', 2),
        ('–ù–µ–≤—Ä–æ–ª–æ–≥—ñ—è', 3),
        ('–ü–µ–¥—ñ–∞—Ç—Ä—ñ—è', 1),
        ('–•—ñ—Ä—É—Ä–≥—ñ—è', 4),
        ('–¢–µ—Ä–∞–ø—ñ—è', 2),
        ('–û—Ä—Ç–æ–ø–µ–¥—ñ—è', 3),
        ('–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—ñ—è', 1)
    ]
    return random.choice(departments)

def get_random_specialty():
    specialties = [
        '–ö–∞—Ä–¥—ñ–æ–ª–æ–≥', '–ù–µ–≤—Ä–æ–ª–æ–≥', '–ü–µ–¥—ñ–∞—Ç—Ä', '–•—ñ—Ä—É—Ä–≥', 
        '–¢–µ—Ä–∞–ø–µ–≤—Ç', '–û—Ä—Ç–æ–ø–µ–¥', '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥'
    ]
    return random.choice(specialties)

def get_random_reason():
    reasons = [
        '–ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å', '–ë—ñ–ª—å —É —Å–ø–∏–Ω—ñ', '–†–µ–≥—É–ª—è—Ä–Ω–∏–π –æ–≥–ª—è–¥',
        '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è', '–í–∏—Å–æ–∫–∏–π —Ç–∏—Å–∫', '–ë–æ–ª—ñ –≤ —Å—É–≥–ª–æ–±–∞—Ö',
        '–ó–∞—Å—Ç—É–¥–∞', '–ê–ª–µ—Ä–≥—ñ—è', '–ü—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω–∏–π –æ–≥–ª—è–¥'
    ]
    return random.choice(reasons)

def get_random_medication():
    medications = [
        ('–ê—Å–ø—ñ—Ä–∏–Ω', '100–º–≥', '1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å'),
        ('–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª', '500–º–≥', '3 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å'),
        ('–Ü–±—É–ø—Ä–æ—Ñ–µ–Ω', '200–º–≥', '2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å'),
        ('–ê–º–æ–∫—Å–∏—Ü–∏–ª—ñ–Ω', '250–º–≥', '2 —Ä–∞–∑–∏ –Ω–∞ –¥–µ–Ω—å'),
        ('–û–º–µ–ø—Ä–∞–∑–æ–ª', '20–º–≥', '1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å'),
        ('–õ–æ—Ä–∞—Ç–∞–¥–∏–Ω', '10–º–≥', '1 —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å')
    ]
    return random.choice(medications)

def test_crud_operations():
    app = Flask(__name__)
    app.config.from_object(Config)
    db.init_app(app)

    with app.app_context():
        try:
            db.drop_all()
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –≤—ñ–¥–¥—ñ–ª–µ–Ω—å
            departments = []
            for _ in range(random.randint(2, 5)):
                dept_name, floor = get_random_department()
                department = CRUDOperations.create_department(
                    name=f"{dept_name}_{random.randint(1, 100)}", # –î–æ–¥–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä
                    floor_number=floor
                )
                departments.append(department)
                print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {department.name} –Ω–∞ {floor} –ø–æ–≤–µ—Ä—Å—ñ")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –ª—ñ–∫–∞—Ä—ñ–≤
            doctors = []
            for department in departments:
                for _ in range(random.randint(1, 3)):
                    doctor_first_name, doctor_last_name = get_random_name(is_male=random.choice([True, False]))
                    doctor = CRUDOperations.create_doctor(
                        first_name=doctor_first_name,
                        last_name=doctor_last_name,
                        specialty=get_random_specialty(),
                        phone_number=generate_random_phone(),
                        email=generate_random_email(f"{doctor_first_name}_{doctor_last_name}_{random.randint(1, 999)}"),
                        department_id=department.id
                    )
                    doctors.append(doctor)
                    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ª—ñ–∫–∞—Ä—è: {doctor_first_name} {doctor_last_name}")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤
            patients = []
            for _ in range(random.randint(3, 7)):
                is_male = random.choice([True, False])
                patient_first_name, patient_last_name = get_random_name(is_male=is_male)
                patient = CRUDOperations.create_patient(
                    first_name=patient_first_name,
                    last_name=patient_last_name,
                    date_of_birth=generate_random_date(),
                    gender=Gender.MALE if is_male else Gender.FEMALE,
                    phone_number=generate_random_phone(),
                    address=f'–≤—É–ª. {random.choice(["–®–µ–≤—á–µ–Ω–∫–∞", "–§—Ä–∞–Ω–∫–∞", "–õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏", "–°–∞–≥–∞–π–¥–∞—á–Ω–æ–≥–æ"])}, {random.randint(1, 100)}, –ö–∏—ó–≤',
                    email=generate_random_email(f"{patient_first_name}_{patient_last_name}_{random.randint(1, 999)}")
                )
                patients.append(patient)
                print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞: {patient_first_name} {patient_last_name}")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –ø—Ä–∏–π–æ–º—ñ–≤
            appointments = []
            for patient in patients:
                for _ in range(random.randint(1, 3)):
                    doctor = random.choice(doctors)
                    appointment = CRUDOperations.create_appointment(
                        patient_id=patient.id,
                        doctor_id=doctor.id,
                        appointment_datetime=datetime.now() + timedelta(days=random.randint(1, 30)),
                        reason_for_visit=get_random_reason()
                    )
                    appointments.append(appointment)
                    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–π–æ–º: –ü–∞—Ü—ñ—î–Ω—Ç {patient.last_name} –¥–æ –ª—ñ–∫–∞—Ä—è {doctor.last_name}")

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ä–µ—Ü–µ–ø—Ç—ñ–≤
            prescriptions = []
            for appointment in appointments:
                if random.choice([True, False]):  # 50% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—É
                    med_name, dosage, frequency = get_random_medication()
                    prescription = CRUDOperations.create_prescription(
                        patient_id=appointment.patient_id,
                        doctor_id=appointment.doctor_id,
                        medication_name=med_name,
                        dosage=dosage,
                        frequency=frequency,
                        start_date=date.today(),
                        end_date=date.today() + timedelta(days=random.randint(7, 30))
                    )
                    prescriptions.append(prescription)
                    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç: {med_name} {dosage}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:")
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {len(departments)}")
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ª—ñ–∫–∞—Ä—ñ–≤: {len(doctors)}")
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤: {len(patients)}")
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏–π–æ–º—ñ–≤: {len(appointments)}")
            print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç—ñ–≤: {len(prescriptions)}")

            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
            test_dept = random.choice(departments)
            doctors = CRUDOperations.find_doctors_by_department(test_dept.id)
            print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ª—ñ–∫–∞—Ä—ñ–≤ —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ {test_dept.name}: {len(doctors)}")

            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª—ñ–∫–∞—Ä—è
            test_doctor = random.choice(doctors)
            appointments = CRUDOperations.find_appointments_by_doctor(test_doctor.id)
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–π–æ–º—ñ–≤ —É –ª—ñ–∫–∞—Ä—è {test_doctor.last_name}: {len(appointments)}")

            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞
            test_patient = random.choice(patients)
            prescriptions = CRUDOperations.find_prescriptions_by_patient(test_patient.id)
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –ø–∞—Ü—ñ—î–Ω—Ç–∞ {test_patient.last_name}: {len(prescriptions)}")

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            print("\nüóë –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
            
            # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Ä–µ—Ü–µ–ø—Ç–∏
            for prescription in prescriptions:
                try:
                    CRUDOperations.delete_prescription(prescription.id)
                    print(f"‚úì –í–∏–¥–∞–ª–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç {prescription.id}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É {prescription.id}: {str(e)}")

            # –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∏–π–æ–º–∏
            for appointment in appointments:
                try:
                    CRUDOperations.delete_appointment(appointment.id)
                    print(f"‚úì –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–π–æ–º {appointment.id}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–∏–π–æ–º—É {appointment.id}: {str(e)}")

            # –í–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤
            for patient in patients:
                try:
                    CRUDOperations.delete_patient(patient.id)
                    print(f"‚úì –í–∏–¥–∞–ª–µ–Ω–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ {patient.first_name} {patient.last_name}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–∞—Ü—ñ—î–Ω—Ç–∞ {patient.id}: {str(e)}")

            # –í–∏–¥–∞–ª—è—î–º–æ –ª—ñ–∫–∞—Ä—ñ–≤
            for doctor in doctors:
                try:
                    CRUDOperations.delete_doctor(doctor.id)
                    print(f"‚úì –í–∏–¥–∞–ª–µ–Ω–æ –ª—ñ–∫–∞—Ä—è {doctor.first_name} {doctor.last_name}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ª—ñ–∫–∞—Ä—è {doctor.id}: {str(e)}")

            # –ù–∞—Ä–µ—à—Ç—ñ –≤–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
            for department in departments:
                try:
                    CRUDOperations.delete_department(department.id)
                    print(f"‚úì –í–∏–¥–∞–ª–µ–Ω–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {department.name}")
                except Exception as e:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {department.id}: {str(e)}")

            print("\n‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ")

            print("\nüéâ –í—Å—ñ CRUD —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")

        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π: {str(e)}")
            db.session.rollback()

if __name__ == '__main__':
    test_crud_operations() 